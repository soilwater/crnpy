{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cosmic-Ray Neutron Python (CRNPY) Library","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to the homepage of the CRNPY (Cosmic-Ray Neutron Python) library, an open-source Python library designed for the processing and conversion of raw neutron counts from Cosmic-Ray Neutron Probes (CRNP) into accurate field-level soil moisture data.</p> <p>This library has been developed with the intent of providing a comprehensive yet easy-to-use workflow for processing raw data from a variety of CRNP, encompassing multiple manufacturers and models.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Versatility: CRNPY can handle data from various CRNP manufacturers and models. It has been successfully tested on both roving and stationary CRNP.</li> <li>Accuracy: The library shows excellent agreement with ground-based measurements, making it a reliable tool for scientific research and practical applications.</li> <li>Correction Routines: The correction functions of the library have been effectively used to represent field and watershed scale soil moisture conditions.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the CRNPY library, you can use Python's package manager, pip. Simply open your command line or terminal and type:</p> <p><code>pip install crnpy</code></p>"},{"location":"#authors","title":"Authors","text":"<p>The CRNPY library was conceived and developed by Joaquin Peraza and Andres Patrignani in the Soil Water Processes Lab at Kansas State University. The team's passion for making soil moisture data more accessible and easier to process culminated in this powerful tool.</p> <p>The Soil Water Processes Lab at Kansas State University is a leading research group focused on understanding and modeling soil water processes. The lab combines a range of experimental and computational approaches to tackle some of the most pressing issues in soil and water research. The development of the CRNPY library is a testament to the lab's commitment to pushing the boundaries of soil science through the innovative use of technology. like to acknowledge the contributions of the wider scientific community in testing and providing feedback on the library, which has been instrumental in its ongoing development.</p>"},{"location":"reference/","title":"Reference","text":"<p><code>crnpy</code> is a Python package for processing cosmic ray neutron data.</p> <p>Created by Joaquin Peraza and Andres Patrignani.</p>"},{"location":"reference/#crnpy.crnpy.atm_correction","title":"<code>atm_correction(raw_counts, pressure, humidity, temp, Pref, Aref, L, incoming_neutrons=None, incoming_Ref=None)</code>","text":"<p>Correct neutron counts for atmospheric factors and incoming neutron flux.</p> <p>Parameters:</p> Name Type Description Default <code>raw_counts</code> <code>list or array</code> <p>Neutron counts to correct.</p> required <code>pressure</code> <code>list or array</code> <p>Atmospheric pressure readings.</p> required <code>humidity</code> <code>list or array</code> <p>Atmospheric humidity readings in %.</p> required <code>temp</code> <code>list or array</code> <p>Atmospheric temperature readings in Celsius.</p> required <code>Pref</code> <code>float</code> <p>Reference atmospheric pressure in millibars (mbar).</p> required <code>Aref</code> <code>float</code> <p>Reference absolute humidity.</p> required <code>L</code> <code>float</code> <p>Atmospheric attenuation coefficient.</p> required <code>incoming_neutrons</code> <code>list or array</code> <p>Incoming neutron flux. Default is None.</p> <code>None</code> <code>incoming_Ref</code> <code>float</code> <p>Reference incoming neutron flux. Default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>numpy.array</code> <p>Total neutron counts corrected by atmospheric conditions.</p> References <p>Zreda, M., Shuttleworth, W. J., Zeng, X., Zweck, C., Desilets, D., Franz, T., et al. (2012). COSMOS: the cosmic-ray soil moisture observing system. Hydrol. Earth Syst. Sci. 16, 4079\u20134099. doi: 10.5194/hess-16-4079-2012</p> <p>Andreasen, M., Jensen, K.H., Desilets, D., Franz, T.E., Zreda, M., Bogena, H.R. and Looms, M.C., 2017. Status and perspectives on the cosmic\u2010ray neutron method for soil moisture estimation and other environmental science applications. Vadose zone journal, 16(8), pp.1-11. doi.org/10.2136/vzj2017.04.0086</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def atm_correction(raw_counts, pressure, humidity, temp, Pref, Aref, L, incoming_neutrons=None, incoming_Ref=None):\n\"\"\"Correct neutron counts for atmospheric factors and incoming neutron flux.\n\n    Args:\n        raw_counts (list or array): Neutron counts to correct.\n        pressure (list or array): Atmospheric pressure readings.\n        humidity (list or array): Atmospheric humidity readings in %.\n        temp (list or array): Atmospheric temperature readings in Celsius.\n        Pref (float): Reference atmospheric pressure in millibars (mbar).\n        Aref (float): Reference absolute humidity.\n        L (float): Atmospheric attenuation coefficient.\n        incoming_neutrons (list or array): Incoming neutron flux. Default is None.\n        incoming_Ref (float): Reference incoming neutron flux. Default is None.\n\n    Returns:\n        (numpy.array): Total neutron counts corrected by atmospheric conditions.\n\n    References:\n        Zreda, M., Shuttleworth, W. J., Zeng, X., Zweck, C., Desilets, D., Franz, T., et al. (2012).\n        COSMOS: the cosmic-ray soil moisture observing system. Hydrol. Earth Syst. Sci. 16, 4079\u20134099.\n        doi: 10.5194/hess-16-4079-2012\n\n        Andreasen, M., Jensen, K.H., Desilets, D., Franz, T.E., Zreda, M., Bogena, H.R. and Looms, M.C., 2017.\n        Status and perspectives on the cosmic\u2010ray neutron method for soil moisture estimation and other\n        environmental science applications. Vadose zone journal, 16(8), pp.1-11. doi.org/10.2136/vzj2017.04.0086\n    \"\"\"\n\n    ### Barometric pressure factor\n    fp = np.exp((Pref - pressure) / L) # Zreda et al. 2017 Eq 5.\n\n    ### Atmospheric water vapor factor\n    # Saturation vapor pressure\n    e_sat = 0.611 * np.exp(17.502 * temp / (temp + 240.97)) * 1000 # in Pascals Eq. 3.8 p.41 Environmental Biophysics (Campbell and Norman)\n\n    # Vapor pressure Pascals\n    Pw = e_sat * humidity/100\n\n    # Absolute humidity (g/m^3)\n    C = 2.16679 # g K/J;\n    A = C * Pw / (temp + 273.15)\n    fw = 1 + 0.0054*(A - Aref) # Zreda et al. 2017 Eq 6.\n\n    ### Incoming neutron flux factor\n    if incoming_neutrons is None:\n        fi = 1\n        warnings.warn(\"Ignoring incoming neutron flux correction factor (using value fi=1)\")\n    else:\n        if incoming_Ref is None and not isinstance(incoming_neutrons, type(None)):\n            incoming_Ref = incoming_neutrons[0]\n            warnings.warn('Reference incoming neutron flux not provided. Using first value of incoming neutron flux.')\n\n        fi = incoming_neutrons/incoming_Ref\n        fi.fillna(1.0, inplace=True) # Use a value of 1 for days without data\n\n    # Apply correction factors\n    return np.round((raw_counts*fw)/(fp*fi))\n</code></pre>"},{"location":"reference/#crnpy.crnpy.biomass_to_bwe","title":"<code>biomass_to_bwe(biomass_dry, biomass_fresh, fWE=0.494)</code>","text":"<p>Function to convert biomass to biomass water equivalent.</p> <p>Parameters:</p> Name Type Description Default <code>biomass_dry</code> <code>array or pd.Series or pd.DataFrame</code> <p>Above ground dry biomass in kg m-2.</p> required <code>biomass_fresh</code> <code>array or pd.Series or pd.DataFrame</code> <p>Above ground fresh biomass in kg m-2.</p> required <code>fWE</code> <code>float</code> <p>Stoichiometric ratio of H2O to organic carbon molecules in the plant (assuming this is mostly cellulose) Default is 0.494 (Wahbi &amp; Avery, 2018).</p> <code>0.494</code> <p>Returns:</p> Type Description <code>array or pd.Series or pd.DataFrame</code> <p>Biomass water equivalent in kg m-2.</p> References <p>Wahbi, A., Avery, W. (2018). In Situ Destructive Sampling. In: Cosmic Ray Neutron Sensing: Estimation of Agricultural Crop Biomass Water Equivalent. Springer, Cham. https://doi.org/10.1007/978-3-319-69539-6_2</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def biomass_to_bwe(biomass_dry, biomass_fresh, fWE=0.494):\n\"\"\"Function to convert biomass to biomass water equivalent.\n\n    Args:\n        biomass_dry (array or pd.Series or pd.DataFrame): Above ground dry biomass in kg m-2.\n        biomass_fresh (array or pd.Series or pd.DataFrame): Above ground fresh biomass in kg m-2.\n        fWE (float): Stoichiometric ratio of H2O to organic carbon molecules in the plant (assuming this is mostly cellulose)\n            Default is 0.494 (Wahbi &amp; Avery, 2018).\n\n    Returns:\n        (array or pd.Series or pd.DataFrame): Biomass water equivalent in kg m-2.\n\n    References:\n        Wahbi, A., Avery, W. (2018). In Situ Destructive Sampling. In:\n        Cosmic Ray Neutron Sensing: Estimation of Agricultural Crop Biomass Water Equivalent.\n        Springer, Cham. https://doi.org/10.1007/978-3-319-69539-6_2\n    \"\"\"\n    return (biomass_fresh - biomass_dry) + fWE * biomass_dry\n</code></pre>"},{"location":"reference/#crnpy.crnpy.bwe_correction","title":"<code>bwe_correction(counts, bwe, r2_N0=0.05)</code>","text":"<p>Function to correct for biomass effects in neutron counts. following the approach described in Baatz et al., 2015.</p> <p>Parameters:</p> Name Type Description Default <code>counts</code> <code>array or pd.Series or pd.DataFrame</code> <p>Array of ephithermal neutron counts.</p> required <code>bwe</code> <code>float</code> <p>Biomass water equivalent kg m-2.</p> required <code>r2_N0</code> <code>float</code> <p>Ratio of the neutron counts reduction (counts kg-1) to the neutron calibration constant (N0). Default is 0.05 (Baatz et al., 2015).</p> <code>0.05</code> <p>Returns:</p> Type Description <code>array or pd.Series or pd.DataFrame</code> <p>Array of corrected neutron counts for biomass effects.</p> References <p>Baatz, R., H. R. Bogena, H.-J. Hendricks Franssen, J. A. Huisman, C. Montzka, and H. Vereecken (2015), An empiricalvegetation correction for soil water content quantification using cosmic ray probes, Water Resour. Res., 51, 2030\u20132046, doi:10.1002/ 2014WR016443.</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def bwe_correction(counts, bwe, r2_N0=0.05):\n\"\"\"Function to correct for biomass effects in neutron counts.\n    following the approach described in Baatz et al., 2015.\n\n    Args:\n        counts (array or pd.Series or pd.DataFrame): Array of ephithermal neutron counts.\n        bwe (float): Biomass water equivalent kg m-2.\n        r2_N0 (float): Ratio of the neutron counts reduction (counts kg-1) to the neutron calibration constant (N0). Default is 0.05 (Baatz et al., 2015).\n\n    Returns:\n        (array or pd.Series or pd.DataFrame): Array of corrected neutron counts for biomass effects.\n\n    References:\n        Baatz, R., H. R. Bogena, H.-J. Hendricks Franssen, J. A. Huisman, C. Montzka, and H. Vereecken (2015),\n        An empiricalvegetation correction for soil water content quantification using cosmic ray probes,\n        Water Resour. Res., 51, 2030\u20132046, doi:10.1002/ 2014WR016443.\n    \"\"\"\n\n    return counts/(1 - bwe*r2_N0)\n</code></pre>"},{"location":"reference/#crnpy.crnpy.compute_total_raw_counts","title":"<code>compute_total_raw_counts(counts, nan_strategy=None)</code>","text":"<p>Compute the sum of uncorrected neutron counts for all detectors.</p> <p>Parameters:</p> Name Type Description Default <code>counts</code> <code>pandas.DataFrame</code> <p>Dataframe containing only the columns with neutron counts.</p> required <code>nan_strategy</code> <code>str</code> <p>Strategy to use for NaN values. Options are 'interpolate', 'average', or None. Default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Dataframe with the sum of uncorrected neutron counts for all detectors.</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def compute_total_raw_counts(counts, nan_strategy=None):\n\"\"\"Compute the sum of uncorrected neutron counts for all detectors.\n\n    Args:\n        counts (pandas.DataFrame): Dataframe containing only the columns with neutron counts.\n        nan_strategy (str): Strategy to use for NaN values. Options are 'interpolate', 'average', or None. Default is None.\n\n    Returns:\n        (pandas.DataFrame): Dataframe with the sum of uncorrected neutron counts for all detectors.\n    \"\"\"\n    counts=counts.copy()\n\n    if counts.isnull().values.any():\n        if nan_strategy is None:\n            raise ValueError('NaN values found. Please fill missing values or provide a strategy. See documentation for more information.')\n        elif nan_strategy == 'interpolate':\n            print('NaN values found. Interpolating missing values using fill_counts().')\n            if type(counts.index) != pd.core.indexes.datetimes.DatetimeIndex:\n                raise ValueError('Index must be a timestamp to use interpolation strategy.')\n            counts = fill_counts(counts)\n        elif nan_strategy == 'average':\n            if len(counts.columns) == 1:\n                raise ValueError('Only one detector found. Cannot use average strategy.')\n            print('NaN values found. Replacing missing values with average of other detectors before summing.')\n            counts = counts.apply(lambda x: x.fillna(counts.mean(axis=1)),axis=0)\n        else:\n            raise ValueError('Invalid strategy.')\n\n    #Compute sum of counts\n    total_raw_counts = counts.sum(axis=1)\n    # Replace zeros with NaN\n    total_raw_counts = total_raw_counts.replace(0, np.nan)\n    return total_raw_counts\n</code></pre>"},{"location":"reference/#crnpy.crnpy.count_time","title":"<code>count_time(df)</code>","text":"<p>Approximate counting time.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>Dataframe containing only the columns with neutron counts and timestamp in the index.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Dataframe with the approximate counting time for each observation.</p> <p>Examples:</p> <p>Using <code>count_time</code> in a console environment:</p> <pre><code>&gt;&gt;&gt; df = pd.DataFrame(...)\n&gt;&gt;&gt; count_time(df)\n0   3600.0\n1   3600.0\n2   3600.0\n</code></pre> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def count_time(df):\n\"\"\"Approximate counting time.\n\n    Args:\n        df (pandas.DataFrame): Dataframe containing only the columns with neutron counts and timestamp in the index.\n\n    Returns:\n        (pandas.DataFrame): Dataframe with the approximate counting time for each observation.\n\n    Examples:\n        Using `count_time` in a console environment:\n\n        &gt;&gt;&gt; df = pd.DataFrame(...)\n        &gt;&gt;&gt; count_time(df)\n        0   3600.0\n        1   3600.0\n        2   3600.0\n    \"\"\"\n\n    # Check that index is a timestamp\n    if type(df.index) != pd.core.indexes.datetimes.DatetimeIndex:\n        raise ValueError('Index must be a timestamp.')\n\n    # Calculate time difference between rows\n    count_time = df.index.to_series().diff().dt.total_seconds()\n\n    return count_time\n</code></pre>"},{"location":"reference/#crnpy.crnpy.counts_to_vwc","title":"<code>counts_to_vwc(counts, N0, Wlat, Wsoc, bulk_density, a0=0.0808, a1=0.372, a2=0.115)</code>","text":"<p>Function to convert corrected and filtered neutron counts into volumetric water content     following the approach described in Desilets et al., 2010.</p> <p>Parameters:</p> Name Type Description Default <code>counts</code> <code>array or pd.Series or pd.DataFrame</code> <p>Array of corrected and filtered neutron counts.</p> required <code>N0</code> <code>float</code> <p>Device-specific neutron calibration constant.</p> required <code>Wlat</code> <code>float</code> <p>Lattice water content.</p> required <code>Wsoc</code> <code>float</code> <p>Soil organic carbon content.</p> required <code>bulk_density</code> <code>float</code> <p>Soil bulk density.</p> required <code>a0</code> <code>float</code> <p>Parameter given in Zreda et al., 2012. Default is 0.0808.</p> <code>0.0808</code> <code>a1</code> <code>float</code> <p>Parameter given in Zreda et al., 2012. Default is 0.372.</p> <code>0.372</code> <code>a2</code> <code>float</code> <p>Parameter given in Zreda et al., 2012. Default is 0.115.</p> <code>0.115</code> <p>Returns:</p> Type Description <code>array or pd.Series or pd.DataFrame</code> <p>Volumetric water content in m3 m-3.</p> References <p>Desilets, D., M. Zreda, and T.P.A. Ferr\u00e9. 2010. Nature\u2019s neutron probe: Land surface hydrology at an elusive scale with cosmic rays. Water Resour. Res. 46:W11505. doi.org/10.1029/2009WR008726</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def counts_to_vwc(counts, N0, Wlat, Wsoc ,bulk_density, a0=0.0808,a1=0.372,a2=0.115):\n\"\"\"Function to convert corrected and filtered neutron counts into volumetric water content\n        following the approach described in Desilets et al., 2010.\n\n    Args:\n        counts (array or pd.Series or pd.DataFrame): Array of corrected and filtered neutron counts.\n        N0 (float): Device-specific neutron calibration constant.\n        Wlat (float): Lattice water content.\n        Wsoc (float): Soil organic carbon content.\n        bulk_density (float): Soil bulk density.\n        a0 (float): Parameter given in Zreda et al., 2012. Default is 0.0808.\n        a1 (float): Parameter given in Zreda et al., 2012. Default is 0.372.\n        a2 (float): Parameter given in Zreda et al., 2012. Default is 0.115.\n\n    Returns:\n        (array or pd.Series or pd.DataFrame): Volumetric water content in m3 m-3.\n\n    References:\n        Desilets, D., M. Zreda, and T.P.A. Ferr\u00e9. 2010. Nature\u2019s neutron probe:\n        Land surface hydrology at an elusive scale with cosmic rays. Water Resour. Res. 46:W11505.\n        doi.org/10.1029/2009WR008726\n    \"\"\"\n\n    # Convert neutron counts into vwc\n    vwc = (a0 / (counts/N0-a1) - a2 - Wlat - Wsoc) * bulk_density\n    return vwc\n</code></pre>"},{"location":"reference/#crnpy.crnpy.cutoff_rigidity","title":"<code>cutoff_rigidity(lat, lon)</code>","text":"<p>Function to estimate the approximate cutoff rigidity for any point on Earth according to the tabulated data of Smart and Shea, 2019. Values are approximations so that users have an idea of what neutron detectors from the Neutron Monitor Database (NMD).</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>float</code> <p>Geographic latitude in decimal degrees. Value in range -90 to 90</p> required <code>lon</code> <code>float</code> <p>Geographic longitude in decimal degrees. Values in range from 0 to 360. Typical negative longitudes in the west hemisphere will fall in the range 180 to 360.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Cutoff rigidity in GV. Error is about +/- 0.3 GV</p> <p>Examples:</p> <p>Estimate the cutoff rigidity for Newark, NJ, US</p> <pre><code>&gt;&gt;&gt; zq = cutoff_rigidity(39.68, -75.75)\n&gt;&gt;&gt; print(zq)\n2.52 GV (Value from NMD is 2.40 GV)\n</code></pre> References <p>Smart, D. &amp; Shea, Matthew. (2001). Geomagnetic Cutoff Rigidity Computer Program: Theory, Software Description and Example. NASA STI/Recon Technical Report N.</p> <p>Shea, M. A., &amp; Smart, D. F. (2019, July). Re-examination of the First Five Ground-Level Events. In International Cosmic Ray Conference (ICRC2019) (Vol. 36, p. 1149).</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def cutoff_rigidity(lat,lon):\n\"\"\"Function to estimate the approximate cutoff rigidity for any point on Earth according to the\n    tabulated data of Smart and Shea, 2019. Values are approximations so that users have an idea of\n    what neutron detectors from the Neutron Monitor Database (NMD).\n\n    Args:\n        lat (float): Geographic latitude in decimal degrees. Value in range -90 to 90\n        lon (float): Geographic longitude in decimal degrees. Values in range from 0 to 360.\n            Typical negative longitudes in the west hemisphere will fall in the range 180 to 360.\n\n    Returns:\n        (float): Cutoff rigidity in GV. Error is about +/- 0.3 GV\n\n    Examples:\n        Estimate the cutoff rigidity for Newark, NJ, US\n\n        &gt;&gt;&gt; zq = cutoff_rigidity(39.68, -75.75)\n        &gt;&gt;&gt; print(zq)\n        2.52 GV (Value from NMD is 2.40 GV)\n\n    References:\n        Smart, D. &amp; Shea, Matthew. (2001). Geomagnetic Cutoff Rigidity Computer Program:\n        Theory, Software Description and Example. NASA STI/Recon Technical Report N.\n\n        Shea, M. A., &amp; Smart, D. F. (2019, July). Re-examination of the First Five Ground-Level Events.\n        In International Cosmic Ray Conference (ICRC2019) (Vol. 36, p. 1149).\n    \"\"\"\n    xq = lon\n    yq = lat\n\n    if xq &lt; 0:\n        xq = xq*-1 + 180\n    Z = np.array(data.cutoff_rigidity)\n    x = np.linspace(0, 360, Z.shape[1])\n    y = np.linspace(90, -90, Z.shape[0])\n    X, Y = np.meshgrid(x, y)\n    points = np.array( (X.flatten(), Y.flatten()) ).T\n    values = Z.flatten()\n    zq = griddata(points, values, (xq,yq))\n\n    return np.round(zq,2)\n</code></pre>"},{"location":"reference/#crnpy.crnpy.drop_outlier","title":"<code>drop_outlier(raw_counts, window=5, store_outliers=False, min_counts=None, max_counts=None)</code>","text":"<p>Computation of a moving modified Z-score based on the median absolute difference.</p> <p>Parameters:</p> Name Type Description Default <code>raw_counts</code> <code>pandas.DataFrame</code> <p>Dataframe containing only the columns with neutron counts.</p> required <code>window</code> <code>int</code> <p>Window size for the moving median. Default is 11.</p> <code>5</code> <code>store_outliers</code> <code>bool</code> <p>If True, store the outliers in a new column. Default is False.</p> <code>False</code> <code>min_counts</code> <code>int</code> <p>Minimum number of counts for a reading to be considered valid. Default is None.</p> <code>None</code> <code>max_counts</code> <code>int</code> <p>Maximum number of counts for a reading to be considered valid. Default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Dataframe without outliers.</p> <p>or</p> <code>pandas.DataFrame, pandas.DataFrame</code> <p>Dataframe without outliers and dataframe with outliers.</p> References <p>Iglewicz, B. and Hoaglin, D.C., 1993. How to detect and handle outliers (Vol. 16). Asq Press.</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def drop_outlier(raw_counts, window=5, store_outliers=False, min_counts=None, max_counts=None):\n\"\"\"Computation of a moving modified Z-score based on the median absolute difference.\n\n    Args:\n        raw_counts (pandas.DataFrame): Dataframe containing only the columns with neutron counts.\n        window (int): Window size for the moving median. Default is 11.\n        store_outliers (bool): If True, store the outliers in a new column. Default is False.\n        min_counts (int): Minimum number of counts for a reading to be considered valid. Default is None.\n        max_counts (int): Maximum number of counts for a reading to be considered valid. Default is None.\n\n    Returns:\n        (pandas.DataFrame): Dataframe without outliers.\n        or\n        (pandas.DataFrame, pandas.DataFrame): Dataframe without outliers and dataframe with outliers.\n\n    References:\n        Iglewicz, B. and Hoaglin, D.C., 1993. How to detect and handle outliers (Vol. 16). Asq Press.\n    \"\"\"\n\n\n    if min_counts is not None:\n        lower_count = np.sum(raw_counts &lt; min_counts)\n        if lower_count &gt; len(raw_counts) * 0.25:\n            print(f\"WARNING: Discarded {lower_count} counts below {min_counts}. This is more than 25% of the total number of readings. Consider increasing the minimum counts threshold.\")\n        else:\n            print(f\"Discarded counts below {min_counts}: {lower_count}\")\n        raw_counts = raw_counts[raw_counts &gt;= min_counts]\n    if max_counts is not None:\n        upper_count = np.sum(raw_counts &gt; max_counts)\n        print(f\"Discarded counts above {max_counts}: {upper_count}\")\n        raw_counts = raw_counts[raw_counts &lt;= max_counts]\n\n    # Compute median absolute difference\n    median = raw_counts.rolling(window, center=True).median()\n    diff = np.abs(raw_counts - median)\n    mad = diff.rolling(window, center=True).median()\n\n    # Compute modified Z-score\n    modified_z_score = 0.6745 * diff / mad\n    outliers = raw_counts[modified_z_score &gt; 3.5]\n    # Drop outliers\n    raw_counts = raw_counts[modified_z_score &lt; 3.5]\n\n    if store_outliers:\n        return raw_counts, outliers\n    print(f\"Discarded {len(outliers)} outliers using modified Z-score.\")\n    return raw_counts\n</code></pre>"},{"location":"reference/#crnpy.crnpy.estimate_lattice_water","title":"<code>estimate_lattice_water(clay_content, total_carbon=None)</code>","text":"<p>Estimate the amount of water in the lattice of clay minerals.</p> $\\omega_{lat} = 1.241 + 0.069 * clay(\\%)$ $\\omega_{lat} = -0.028 + 0.077 * clay(\\%) + 0.459 * carbon(\\%)$ Linear regression [lattice water (%) as a function of clay (%)] done with data from Soil Water Processes Lab and Dong and Ochsner (2018) Multiple linear regression [lattice water (%) as a function of clay (%) and soil carbon (%)] done with data from Soil Water Processes Lab. <p>Parameters:</p> Name Type Description Default <code>clay_content</code> <code>float</code> <p>Clay content in the soil in percent.</p> required <code>total_carbon</code> <code>float</code> <p>Total carbon content in the soil in percent. If None, the amount of water is estimated based on clay content only.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>Amount of water in the lattice of clay minerals in percent</p> References <p>Dong, J., &amp; Ochsner, T. E. (2018). Soil texture often exerts a stronger influence than precipitation  on mesoscale soil moisture patterns. Water Resources Research, 54, 2199\u2013 2211.  https://doi.org/10.1002/2017WR021692</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def estimate_lattice_water(clay_content, total_carbon=None):\n\"\"\"Estimate the amount of water in the lattice of clay minerals.\n\n    ![img1](img/lattice_water_simple.png) | ![img2](img/lattice_water_multiple.png)\n    :-------------------------:|:-------------------------:\n    $\\omega_{lat} = 1.241 + 0.069 * clay(\\%)$ | $\\omega_{lat} = -0.028 + 0.077 * clay(\\%) + 0.459 * carbon(\\%)$\n    Linear regression [lattice water (%) as a function of clay (%)] done with data from Soil Water Processes Lab and Dong and Ochsner (2018) |  Multiple linear regression [lattice water (%) as a function of clay (%) and soil carbon (%)] done with data from Soil Water Processes Lab.\n\n    Args:\n        clay_content (float): Clay content in the soil in percent.\n        total_carbon (float, optional): Total carbon content in the soil in percent.\n            If None, the amount of water is estimated based on clay content only.\n\n    Returns:\n        (float): Amount of water in the lattice of clay minerals in percent\n\n    References:\n        Dong, J., &amp; Ochsner, T. E. (2018). Soil texture often exerts a stronger influence than precipitation\n         on mesoscale soil moisture patterns. Water Resources Research, 54, 2199\u2013 2211.\n         https://doi.org/10.1002/2017WR021692\n\n    \"\"\"\n    if total_carbon is None:\n        lattice_water = 1.241 + 0.069 * clay_content\n    else:\n        lattice_water = -0.028 + 0.077 * clay_content + 0.459 * total_carbon\n    return lattice_water\n</code></pre>"},{"location":"reference/#crnpy.crnpy.fill_counts","title":"<code>fill_counts(counts, count_times=None, expected_time=False, threshold=0.25, limit=3)</code>","text":"<p>Fill missing neutron counts. Observation periods shorter than threshold are discarded (replaced with NaN).</p> <p>Parameters:</p> Name Type Description Default <code>counts</code> <code>pandas.DataFrame</code> <p>DataFrame with neutron counts, might have count_time column(s).</p> required <code>count_time</code> <code>pandas.Series or pandas.DataFrame</code> <p>Counting time in seconds. If a DataFrame is provided, it must have the same number of columns as df.</p> required <code>expected_time</code> <code>int</code> <p>Expected counting time in seconds. If not provided, it is calculated as the median of the counting times.</p> <code>False</code> <code>threshold</code> <code>float</code> <p>Minimum fraction of the neutron integration time. Default is 0.25.</p> <code>0.25</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>DataFrame with linearly interpolated neutron counts.</p> <p>Examples:</p> <p>Using <code>fill_counts</code> in a console environment:</p> <pre><code>&gt;&gt;&gt; counts = pd.DataFrame({'counts':[100,105,98,102], count_time:[3600,200,3600,3600]})\n&gt;&gt;&gt; fill_counts(counts, count_time=count_time, expected_time=3600, threshold=0.25)\n0   100.0\n1   NaN\n2   98.0\n3   102.0\n</code></pre> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def fill_counts(counts, count_times=None, expected_time=False, threshold=0.25, limit=3):\n\"\"\"Fill missing neutron counts. Observation periods shorter than threshold are discarded (replaced with NaN).\n\n    Args:\n        counts (pandas.DataFrame): DataFrame with neutron counts, might have count_time column(s).\n        count_time (pandas.Series or pandas.DataFrame): Counting time in seconds. If a DataFrame is provided, it must have the same number of columns as df.\n        expected_time (int): Expected counting time in seconds. If not provided, it is calculated as the median of the counting times.\n        threshold (float): Minimum fraction of the neutron integration time. Default is 0.25.\n\n    Returns:\n        (pandas.DataFrame): DataFrame with linearly interpolated neutron counts.\n\n    Examples:\n        Using `fill_counts` in a console environment:\n\n        &gt;&gt;&gt; counts = pd.DataFrame({'counts':[100,105,98,102], count_time:[3600,200,3600,3600]})\n        &gt;&gt;&gt; fill_counts(counts, count_time=count_time, expected_time=3600, threshold=0.25)\n        0   100.0\n        1   NaN\n        2   98.0\n        3   102.0\n    \"\"\"\n\n    counts=counts.copy()\n\n    if type(counts.index) == pd.core.indexes.datetimes.DatetimeIndex and isinstance(count_times, type(None)):\n        warnings.warn(\"No count time columns provided. Using timestamp index to compute count time.\")\n        count_times = counts.index.to_series().diff().dt.total_seconds()\n\n    if type(counts.index) != pd.core.indexes.datetimes.DatetimeIndex and isinstance(count_times, type(None)):\n        raise ValueError('Index must be a timestamp or count times must be provided.')\n\n    if len(counts) != len(count_times):\n        raise ValueError('Count times length does not match number of readings.')\n\n    if expected_time is False:\n        expected_time = count_times.median()\n        print('Using median count time as expected count time:', expected_time)\n\n    # Replace values below threshold with NaN\n    time_threshold = round(expected_time * threshold)\n\n    if type(count_times) == pd.core.frame.DataFrame:\n        if len(count_times.columns) == 1:\n            idx_nan = count_times[count_times &lt; time_threshold].index\n            counts.loc[idx_nan] = np.nan\n        else:\n            for i in range(len(count_times.columns)):\n                idx_nan = count_times[count_times.iloc[:,i] &lt; time_threshold].index\n                counts.iloc[:,i].loc[idx_nan] = np.nan\n    elif type(count_times) == pd.core.series.Series:\n        idx_nan = count_times[count_times &lt; time_threshold].index\n        counts.loc[idx_nan] = np.nan\n    elif type(count_times) == np.ndarray:\n        idx_nan = np.where(count_times &lt; time_threshold)\n        counts.loc[idx_nan] = np.nan\n\n    # Fill missing values with linear interpolation and round to nearest integer\n    counts = counts.interpolate(method='linear', limit=limit, limit_direction='both').round()\n    return counts\n</code></pre>"},{"location":"reference/#crnpy.crnpy.fill_missing_atm","title":"<code>fill_missing_atm(cols_atm, limit=24)</code>","text":"<p>Fill missing values in atmospheric variables. Gap filling is performed using a piecewise cubic Hermite interpolating polynomial (pchip method) that is restricted to intervals of missing data with a limited number of values and surrounded by valid observations. There is no interpolation at the end of the time series.</p> <p>Parameters:</p> Name Type Description Default <code>col_atm</code> <code>pandas.Series or pandas.DataFrame</code> <p>Atmospheric variables to fill.</p> required <code>limit</code> <code>int</code> <p>Maximum number of consecutive missing values to interpolate. Default is 24.</p> <code>24</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Atmospheric variables with filled missing values using a piecewise cubic Hermite polynomial.</p> References <p>https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def fill_missing_atm(cols_atm, limit=24):\n\"\"\"Fill missing values in atmospheric variables. Gap filling is performed using a\n    piecewise cubic Hermite interpolating polynomial (pchip method) that is restricted to intervals\n    of missing data with a limited number of values and surrounded by valid observations.\n    There is no interpolation at the end of the time series.\n\n    Args:\n        col_atm (pandas.Series or pandas.DataFrame): Atmospheric variables to fill.\n        limit (int): Maximum number of consecutive missing values to interpolate. Default is 24.\n\n    Returns:\n        (pandas.DataFrame): Atmospheric variables with filled missing values using a piecewise cubic Hermite polynomial.\n\n    References:\n        https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html\n    \"\"\"\n\n    # Fill missing values in atmospheric variables\n    return cols_atm.interpolate(method='pchip', limit=limit, limit_direction='both')\n</code></pre>"},{"location":"reference/#crnpy.crnpy.find_neutron_detectors","title":"<code>find_neutron_detectors(Rc, start_date=None, end_date=None)</code>","text":"<p>Search for potential reference neutron monitoring stations based on cutoff rigidity.</p> <p>Parameters:</p> Name Type Description Default <code>Rc</code> <code>float</code> <p>Cutoff rigidity in GV. Values in range 1.0 to 3.0 GV.</p> required <code>start_date</code> <code>datetime</code> <p>Start date for the period of interest.   </p> <code>None</code> <code>end_date</code> <code>datetime</code> <p>End date for the period of interest.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>List of top five stations with closes cutoff rigidity. User needs to select station according to site altitude.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from crnpy import crnpy\n&gt;&gt;&gt; Rc = 2.40 # 2.40 Newark, NJ, US\n&gt;&gt;&gt; crnpy.find_neutron_detectors(Rc)\nSelect a station with an altitude similar to that of your location. For more information go to: 'https://www.nmdb.eu/nest/help.php#helpstations\n</code></pre> <p>Your cutoff rigidity is 2.4 GV         STID                          NAME     R  Altitude_m 40   NEWK                        Newark  2.40          50 33   MOSC                        Moscow  2.43         200 27   KIEL                          Kiel  2.36          54 28  KIEL2                        KielRT  2.36          54 31   MCRL  Mobile Cosmic Ray Laboratory  2.46         200 32   MGDN                       Magadan  2.10         220 42   NVBK                   Novosibirsk  2.91         163 26   KGSN                      Kingston  1.88          65 9    CLMX                        Climax  3.00        3400 57   YKTK                       Yakutsk  1.65         105</p> References <p>https://www.nmdb.eu/nest/help.php#helpstations</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def find_neutron_detectors(Rc, start_date=None, end_date=None):\n\"\"\"Search for potential reference neutron monitoring stations based on cutoff rigidity.\n\n    Args:\n        Rc (float): Cutoff rigidity in GV. Values in range 1.0 to 3.0 GV.\n        start_date (datetime): Start date for the period of interest.   \n        end_date (datetime): End date for the period of interest.\n\n    Returns:\n        (list): List of top five stations with closes cutoff rigidity.\n            User needs to select station according to site altitude.\n\n    Examples:\n        &gt;&gt;&gt; from crnpy import crnpy\n        &gt;&gt;&gt; Rc = 2.40 # 2.40 Newark, NJ, US\n        &gt;&gt;&gt; crnpy.find_neutron_detectors(Rc)\n        Select a station with an altitude similar to that of your location. For more information go to: 'https://www.nmdb.eu/nest/help.php#helpstations\n\n        Your cutoff rigidity is 2.4 GV\n                STID                          NAME     R  Altitude_m\n        40   NEWK                        Newark  2.40          50\n        33   MOSC                        Moscow  2.43         200\n        27   KIEL                          Kiel  2.36          54\n        28  KIEL2                        KielRT  2.36          54\n        31   MCRL  Mobile Cosmic Ray Laboratory  2.46         200\n        32   MGDN                       Magadan  2.10         220\n        42   NVBK                   Novosibirsk  2.91         163\n        26   KGSN                      Kingston  1.88          65\n        9    CLMX                        Climax  3.00        3400\n        57   YKTK                       Yakutsk  1.65         105\n\n    References:\n        https://www.nmdb.eu/nest/help.php#helpstations\n    \"\"\"\n\n    # Load file with list of neutron monitoring stations\n    stations = pd.DataFrame(data.neutron_detectors, columns=[\"STID\",\"NAME\",\"R\",\"Altitude_m\"])\n\n    # Sort stations by closest cutoff rigidity\n    idx_R = (stations['R'] - Rc).abs().argsort()\n\n    if start_date is not None and end_date is not None:\n        stations[\"Period available\"] = False\n        for i in range(10):\n            station = stations.iloc[idx_R[i]][\"STID\"]\n            try:\n                if get_incoming_neutron_flux(start_date, end_date, station, verbose=-1) is not None:\n                    stations.iloc[idx_R[i],-1] = True\n            except:\n                pass\n        if sum(stations[\"Period available\"] == True) == 0:\n            print(\"No stations available for the selected period!\")\n        else:\n            stations = stations[stations[\"Period available\"] == True]\n            idx_R = (stations['R'] - Rc).abs().argsort()\n            result = stations.iloc[idx_R.iloc[:10]]\n    else:\n        result = stations.reindex(idx_R).head(10).rename_axis(None)\n\n    # Print results\n    print('')\n    print(\"\"\"Select a station with an altitude similar to that of your location. For more information go to: 'https://www.nmdb.eu/nest/help.php#helpstations\"\"\")\n    print('')\n    print(f\"Your cutoff rigidity is {Rc} GV\")\n    print(result)\n    return result\n</code></pre>"},{"location":"reference/#crnpy.crnpy.format_dates_df","title":"<code>format_dates_df(df, col='timestamp', format='%Y-%m-%d %H:%M:%S', freq='H', round_time=True)</code>","text":"<p>Helper function to change the format and round timestamps.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>DataFrame with timestamp in the index.</p> required <code>col</code> <code>str</code> <p>Column with the timestamp. Default is 'timestamp'.</p> <code>'timestamp'</code> <code>format</code> <code>str</code> <p>Format of the timestamp. Default is '%Y-%m-%d %H:%M:%S'.</p> <code>'%Y-%m-%d %H:%M:%S'</code> <code>freq</code> <code>str</code> <p>Rounding interval. 'H' for hourly, 'M' for minute, or None. Default is 'H'.</p> <code>'H'</code> <code>round_time</code> <code>bool</code> <p>Whether to round timestamps to the nearest frequency. Default is True.</p> <code>True</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>DataFrame with formatted timestamps and rounded time.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from crnpy import crnpy\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame({'timestamp':['2020-01-01 00:00:00','2020-01-01 00:30:00','2020-01-01 01:00:00']})\n&gt;&gt;&gt; df = crnpy.format_dates_df(df, col='timestamp', format='%Y-%m-%d %H:%M:%S', freq='H', round_time=True)\n&gt;&gt;&gt; df\n                timestamp\n0   2020-01-01 00:00:00\n1   2020-01-01 00:00:00\n2   2020-01-01 01:00:00\n</code></pre> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def format_dates_df(df, col='timestamp', format='%Y-%m-%d %H:%M:%S', freq='H', round_time=True):\n\"\"\"Helper function to change the format and round timestamps.\n\n     Args:\n         df (pandas.DataFrame): DataFrame with timestamp in the index.\n         col (str, optional): Column with the timestamp. Default is 'timestamp'.\n         format (str, optional): Format of the timestamp. Default is '%Y-%m-%d %H:%M:%S'.\n         freq (str, optional): Rounding interval. 'H' for hourly, 'M' for minute, or None. Default is 'H'.\n         round_time (bool, optional): Whether to round timestamps to the nearest frequency. Default is True.\n\n     Returns:\n         (pandas.DataFrame): DataFrame with formatted timestamps and rounded time.\n\n     Examples:\n            &gt;&gt;&gt; from crnpy import crnpy\n            &gt;&gt;&gt; import pandas as pd\n            &gt;&gt;&gt; df = pd.DataFrame({'timestamp':['2020-01-01 00:00:00','2020-01-01 00:30:00','2020-01-01 01:00:00']})\n            &gt;&gt;&gt; df = crnpy.format_dates_df(df, col='timestamp', format='%Y-%m-%d %H:%M:%S', freq='H', round_time=True)\n            &gt;&gt;&gt; df\n                            timestamp\n            0   2020-01-01 00:00:00\n            1   2020-01-01 00:00:00\n            2   2020-01-01 01:00:00\n     \"\"\"\n\n    # Change format of timestamp if needed\n    if df[col].dtype != 'datetime64[ns]':\n        df[col] = pd.to_datetime(df[col], format=format)\n\n    # Round timestamps to nearest frequency\n    if round_time:\n        df[col] = df[col].dt.round(freq)\n\n    # Fill in rows with missing timestamps\n    start_date = df[col].iloc[0]\n    end_date = df[col].iloc[-1]\n    date_range = pd.date_range(start_date, end_date, freq=freq)\n    for date in date_range:\n        if date not in df[col].values:\n            print('Adding missing date:',date)\n            new_line = pd.DataFrame({col:date}, index=[-1]) # By default fills columns with np.nan\n            source = pd.concat([df,new_line])\n\n    df.sort_values(by=col, inplace=True)\n    df.reset_index(drop=True, inplace=True)\n    df.set_index(col, inplace=True)\n    return df\n</code></pre>"},{"location":"reference/#crnpy.crnpy.get_incoming_neutron_flux","title":"<code>get_incoming_neutron_flux(start_date, end_date, station, utc_offset=0, verbose=False)</code>","text":"<p>Function to retrieve neutron flux from the Neutron Monitor Database.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>datetime</code> <p>Start date of the time series.</p> required <code>end_date</code> <code>datetime</code> <p>End date of the time series.</p> required <code>station</code> <code>str</code> <p>Neutron Monitor station to retrieve data from.</p> required <code>utc_offset</code> <code>int</code> <p>UTC offset in hours. Default is 0.</p> <code>0</code> <code>verbose</code> <code>bool</code> <p>Print information about the request. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Neutron flux in counts per hour and timestamps.</p> References <p>Documentation available:https://www.nmdb.eu/nest/help.php#howto</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def get_incoming_neutron_flux(start_date, end_date, station, utc_offset=0, verbose=False):\n\"\"\"Function to retrieve neutron flux from the Neutron Monitor Database.\n\n    Args:\n        start_date (datetime): Start date of the time series.\n        end_date (datetime): End date of the time series.\n        station (str): Neutron Monitor station to retrieve data from.\n        utc_offset (int): UTC offset in hours. Default is 0.\n        verbose (bool): Print information about the request. Default is False.\n\n    Returns:\n        (pandas.DataFrame): Neutron flux in counts per hour and timestamps.\n\n    References:\n        Documentation available:https://www.nmdb.eu/nest/help.php#howto\n    \"\"\"\n\n    # Example: get_incoming_flux(station='IRKT',start_date='2020-04-10 11:00:00',end_date='2020-06-18 17:00:00')\n    # Template url = 'http://nest.nmdb.eu/draw_graph.php?formchk=1&amp;stations[]=KERG&amp;output=ascii&amp;tabchoice=revori&amp;dtype=corr_for_efficiency&amp;date_choice=bydate&amp;start_year=2009&amp;start_month=09&amp;start_day=01&amp;start_hour=00&amp;start_min=00&amp;end_year=2009&amp;end_month=09&amp;end_day=05&amp;end_hour=23&amp;end_min=59&amp;yunits=0'\n\n\n    # Add 1 hour to ensure the last date is included in the request.\n    end_date += pd.Timedelta(hours=1)\n\n    # Convert local time to UTC\n    start_date = start_date - datetime.timedelta(hours=utc_offset)\n    end_date = end_date - datetime.timedelta(hours=utc_offset)\n    date_format = '%Y-%m-%d %H:%M:%S'\n    root = 'http://www.nmdb.eu/nest/draw_graph.php?'\n    url_par = [ 'formchk=1',\n                'stations[]=' + station,\n                'output=ascii',\n                'tabchoice=revori',\n                'dtype=corr_for_efficiency',\n                'tresolution=' + str(60),\n                'date_choice=bydate',\n                'start_year=' + str(start_date.year),\n                'start_month=' + str(start_date.month),\n                'start_day=' + str(start_date.day),\n                'start_hour=' + str(start_date.hour),\n                'start_min=' + str(start_date.minute),\n                'end_year=' + str(end_date.year),\n                'end_month=' + str(end_date.month),\n                'end_day=' + str(end_date.day),\n                'end_hour=' + str(end_date.hour),\n                'end_min=' + str(end_date.minute),\n                'yunits=0']\n\n    url = root + '&amp;'.join(url_par)\n\n    if verbose &gt; 0:\n        print(f\"Retrieving data from {url}\")\n\n    r = requests.get(url).content.decode('utf-8')\n\n    # Subtract 1 hour to restore the last date included in the request.\n    end_date -= pd.Timedelta('1H')\n    start = r.find(\"RCORR_E\\n\") + 8\n    end = r.find('\\n&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;Total') - 1\n    s = r[start:end]\n    s2 = ''.join([row.replace(';',',') for row in s])\n    try:\n        df_flux = pd.read_csv(io.StringIO(s2), names=['timestamp','counts'])\n    except:\n        if verbose &gt; -1:\n            print(f\"Error retrieving data from {url}\")\n        return None\n\n    # Check if all values from selected detector are NaN. If yes, warn the user\n    if df_flux['counts'].isna().all():\n        warnings.warn('Data for selected neutron detectors appears to be unavailable for the selected period')\n\n\n    # Print acknowledgement to inform users about restrictions and to acknowledge the NMDB database\n    acknowledgement = \"\"\"Data retrieved via NMDB are the property of the individual data providers. These data are free for non commercial\nuse to within the restriction imposed by the providers. If you use such data for your research or applications, please acknowledge\nthe origin by a sentence like 'We acknowledge the NMDB database (www.nmdb.eu) founded under the European Union's FP7 programme \n(contract no. 213007), and the PIs of individual neutron monitors at: IGY Jungfraujoch \n(Physikalisches Institut, University of Bern, Switzerland)\"\"\"\n    #print(acknowledgement)\n\n    return df_flux\n</code></pre>"},{"location":"reference/#crnpy.crnpy.haversine","title":"<code>haversine(lat1, lng1, lat2, lng2)</code>","text":"<p>Calculate the great circle distance between two points on the earth (specified in decimal degrees).</p> <p>Parameters:</p> Name Type Description Default <code>lat1</code> <code>float</code> <p>Latitude of the first point.</p> required <code>lng1</code> <code>float</code> <p>Longitude of the first point.</p> required <code>lat2</code> <code>float</code> <p>Latitude of the second point.</p> required <code>lng2</code> <code>float</code> <p>Longitude of the second point.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Distance between the two points in meters.</p> References <p>https://en.wikipedia.org/wiki/Haversine_formula</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def haversine(lat1, lng1, lat2, lng2):\n\"\"\"Calculate the great circle distance between two points on the earth (specified in decimal degrees).\n\n    Args:\n        lat1 (float): Latitude of the first point.\n        lng1 (float): Longitude of the first point.\n        lat2 (float): Latitude of the second point.\n        lng2 (float): Longitude of the second point.\n\n    Returns:\n        (float): Distance between the two points in meters.\n\n    References:\n        https://en.wikipedia.org/wiki/Haversine_formula\n    \"\"\"\n\n    # Convert decimal degrees to radians\n    lng1, lat1, lng2, lat2 = map(np.radians, [lng1, lat1, lng2, lat2])\n\n    # Haversine formula\n    dlng = lng2 - lng1\n    dlat = lat2 - lat1\n    a = np.sin(dlat/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlng/2)**2\n    c = 2 * np.arcsin(np.sqrt(a))\n\n    # Radius of earth in kilometers is 6371\n    km = 6371* c\n    return km*1000\n</code></pre>"},{"location":"reference/#crnpy.crnpy.interpolate_incoming_flux","title":"<code>interpolate_incoming_flux(df_flux, timestamps)</code>","text":"<p>Function to interpolate incoming neutron flux.</p> <p>Parameters:</p> Name Type Description Default <code>df_flux</code> <code>pd.DataFrame</code> <p>Dataframe returned by get_incoming_flux method.</p> required <code>timestamps</code> <code>pd.series or pd.DataFrame or pd.DatetimeIndex</code> <p>Timestamps to interpolate the incoming neutron flux.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Dataframe containing interpolated incoming neutron flux.</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def interpolate_incoming_flux(df_flux, timestamps):\n\"\"\"Function to interpolate incoming neutron flux.\n\n    Args:\n        df_flux (pd.DataFrame): Dataframe returned by get_incoming_flux method.\n        timestamps (pd.series or pd.DataFrame or pd.DatetimeIndex): Timestamps to interpolate the incoming neutron flux.\n\n    Returns:\n        (pd.DataFrame): Dataframe containing interpolated incoming neutron flux.\n    \"\"\"\n\n    # Add timestamps with nan values to the dataframe\n    df_flux['timestamp'] = pd.to_datetime(df_flux['timestamp'])\n    df_flux = df_flux.set_index('timestamp')\n    for timestamp in timestamps:\n        if timestamp not in df_flux.index:\n            df_flux.loc[timestamp] = np.nan\n    df_flux = df_flux.sort_index()\n\n    # Interpolate nan values\n    df_flux = df_flux['counts'].interpolate(method='nearest')\n\n    # Retur only the values for the selected timestamps\n    return df_flux.loc[timestamps]\n</code></pre>"},{"location":"reference/#crnpy.crnpy.normalize_counts","title":"<code>normalize_counts(counts, count_time=3600, count_times=None)</code>","text":"<p>Normalize neutron counts to the desired counting time.</p> <p>Parameters:</p> Name Type Description Default <code>counts</code> <code>pandas.DataFrame</code> <p>Dataframe containing only the columns with neutron counts.</p> required <code>count_time</code> <code>int</code> <p>Count time in seconds for normalization. Default is 3600 seconds.</p> <code>3600</code> <code>count_times</code> <code>pandas.Series or pandas.DataFrame</code> <p>Counting time in seconds. If a DataFrame is provided, it must have the same number of columns as df.</p> <code>None</code> <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>Normalized neutron counts.</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def normalize_counts(counts, count_time=3600, count_times=None):\n\"\"\"Normalize neutron counts to the desired counting time.\n\n    Args:\n        counts (pandas.DataFrame): Dataframe containing only the columns with neutron counts.\n        count_time (int): Count time in seconds for normalization. Default is 3600 seconds.\n        count_times (pandas.Series or pandas.DataFrame): Counting time in seconds. If a DataFrame is provided, it must have the same number of columns as df.\n\n    Returns:\n        (pandas.DataFrame): Normalized neutron counts.\n\n    \"\"\"\n\n    if count_times is None and type(counts.index) == pd.core.indexes.datetimes.DatetimeIndex:\n        print(\"No count_times columns provided. Using timestamp index to compute count time.\")\n        count_times = counts.index.to_series().diff().dt.total_seconds()\n\n    if isinstance(count_times, type(None)):\n        raise ValueError('Count time must be provided or index must be a timestamp.')\n\n    if len(counts) != len(count_times):\n        raise ValueError('Count times length does not match number of readings.')\n\n\n    #Normalize counts rounded to integer\n    if type(count_times) == pd.core.series.Series or len(count_times.columns) == 1:\n        normalized_counts = counts.div(count_times, axis=0).mul(count_time).round()\n        return normalized_counts\n    else:\n        normalized_counts = counts.copy()\n        count_times = count_times.copy()\n        for i in range(len(count_times.columns)):\n            normalized_counts[normalized_counts.columns[i]] = normalized_counts.iloc[:,i].div(count_times.iloc[:,i], axis=0).mul(count_time).round()\n        return normalized_counts\n</code></pre>"},{"location":"reference/#crnpy.crnpy.nrad_weight","title":"<code>nrad_weight(h, theta, distances, depth, rhob=1.4)</code>","text":"<p>Function to compute distance weights corresponding to each soil sample.</p> <p>Parameters:</p> Name Type Description Default <code>h</code> <code>float</code> <p>Air Humidity  from 0.1  to 50    in g/m^3. When h=0, the function will skip the distance weighting.</p> required <code>theta</code> <code>array or pd.Series or pd.DataFrame</code> <p>Soil Moisture for each sample (0.02 - 0.50 m^3/m^3)</p> required <code>distances</code> <code>array or pd.Series or pd.DataFrame</code> <p>Distances from the location of each sample to the origin (0.5 - 600 m)</p> required <code>depth</code> <code>array or pd.Series or pd.DataFrame</code> <p>Depths for each sample (m)</p> required <code>rhob</code> <code>float</code> <p>Bulk density in g/cm^3</p> <code>1.4</code> <p>Returns:</p> Type Description <code>array or pd.Series or pd.DataFrame</code> <p>Distance weights for each sample.</p> References <p>K\u00f6hli, M., Schr\u00f6n, M., Zreda, M., Schmidt, U., Dietrich, P., and Zacharias, S. (2015). Footprint characteristics revised for field-scale soil moisture monitoring with cosmic-ray neutrons. Water Resour. Res. 51, 5772\u20135790. doi:10.1002/2015WR017169</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def nrad_weight(h,theta,distances,depth,rhob=1.4):\n\"\"\"Function to compute distance weights corresponding to each soil sample.\n\n    Args:\n        h (float): Air Humidity  from 0.1  to 50    in g/m^3. When h=0, the function will skip the distance weighting.\n        theta (array or pd.Series or pd.DataFrame): Soil Moisture for each sample (0.02 - 0.50 m^3/m^3)\n        distances (array or pd.Series or pd.DataFrame): Distances from the location of each sample to the origin (0.5 - 600 m)\n        depth (array or pd.Series or pd.DataFrame): Depths for each sample (m)\n        rhob (float): Bulk density in g/cm^3\n\n    Returns:\n        (array or pd.Series or pd.DataFrame): Distance weights for each sample.\n\n    References:\n        K\u00f6hli, M., Schr\u00f6n, M., Zreda, M., Schmidt, U., Dietrich, P., and Zacharias, S. (2015).\n        Footprint characteristics revised for field-scale soil moisture monitoring with cosmic-ray\n        neutrons. Water Resour. Res. 51, 5772\u20135790. doi:10.1002/2015WR017169\n    \"\"\"\n\n    # Table A1. Parameters for Fi and D86\n    p10 = 8735;       p11 = 17.1758; p12 = 11720;      p13 = 0.00978;   p14 = 7045;      p15 = 0.003632;\n    p20 = 2.7925e-2;  p21 = 5.0399;  p22 = 2.8544e-2;  p23 = 0.002455;  p24 = 6.851e-5;  p25 = 9.2926;\n    p30 = 247970;     p31 = 17.63;   p32 = 374655;     p33 = 0.00191;   p34 = 195725;\n    p40 = 5.4818e-2;  p41 = 15.921;  p42 = 0.6373;     p43 = 5.99e-2;   p44 = 5.425e-4;\n    p50 = 1383702;    p51 = 4.156;   p52 = 5325;       p53 = 0.00238;   p54 = 0.0156;    p55 = 0.130;     p56 = 1521;\n    p60 = 6.031e-5;   p61 = 98.5;    p62 = 1.0466e-3;\n    p70 = 11747;      p71 = 41.66;   p72 = 4521;       p73 = 0.01998;   p74 = 0.00604;   p75 = 2534;      p76 = 0.00475;\n    p80 = 1.543e-2;   p81 = 10.06;   p82 = 1.807e-2;   p83 = 0.0011;    p84 = 8.81e-5;   p85 = 0.0405;    p86 = 20.24;\n    p90 = 8.321;      p91 = 0.14249; p92 = 0.96655;    p93 = 26.42;     p94 = 0.0567;\n\n\n    # Numerical determination of the penetration depth (86%) (Eq. 8)\n    D86 = 1/rhob*(p90+p91*(p92+np.exp(-1*distances/100))*(p93+theta)/(p94+theta))\n\n    # Depth weights (Eq. 7)\n    Wd = np.exp(-2*depth/D86)\n\n    if h == 0:\n        W = 1 # skip distance weighting\n\n    elif (h &gt;= 0.1) and (h&lt;= 50):\n        # Functions for Fi (Appendix A in K\u00f6hli et al., 2015)\n        F1 = p10*(1+p13*h)*np.exp(-p11*theta)+p12*(1+p15*h)-p14*theta\n        F2 = ((-p20+p24*h)*np.exp(-p21*theta/(1+p25*theta))+p22)*(1+h*p23)\n        F3 = (p30*(1+p33*h)*np.exp(-p31*theta)+p32-p34*theta)\n        F4 = p40*np.exp(-p41*theta)+p42-p43*theta+p44*h\n        F5 = p50*(0.02-1/p55/(h-p55+p56*theta))*(p54-theta)*np.exp(-p51*(theta-p54))+p52*(0.7-h*theta*p53)\n        F6 = p60*(h+p61)+p62*theta\n        F7 = (p70*(1-p76*h)*np.exp(-p71*theta*(1-h*p74))+p72-p75*theta)*(2+h*p73)\n        F8 = ((-p80+p84*h)*np.exp(-p81*theta/(1+p85*h+p86*theta))+p82)*(2+h*p83)\n\n        # Distance weights (Eq. 3)\n        W = np.ones_like(distances)*np.nan\n        for i in range(len(distances)):\n            if (distances[i]&lt;=50) and (distances[i]&gt;0.5):\n                W[i]=F1[i]*(np.exp(-F2[i]*distances[i]))+F3[i]*np.exp(-F4[i]*distances[i])\n\n            elif (distances[i]&gt;50) and (distances[i]&lt;600):\n                W[i]=F5[i]*(np.exp(-F6[i]*distances[i]))+F7[i]*np.exp(-F8[i]*distances[i])\n\n            else:\n                raise ValueError('Input distances are not valid.')\n\n    else:\n        raise ValueError('Air humidity values are out of range.')\n\n\n    # Combined and normalized weights\n    weights = Wd*W/np.nansum(Wd*W)\n\n    return weights\n</code></pre>"},{"location":"reference/#crnpy.crnpy.road_correction","title":"<code>road_correction(counts, theta_N, road_width, road_distance=0.0, theta_road=0.12, p0=0.42, p1=0.5, p2=1.06, p3=4, p4=0.16, p6=0.94, p7=1.1, p8=2.7, p9=0.01)</code>","text":"<p>Function to correct for road effects in neutron counts. following the approach described in Schr\u00f6n et al., 2018.</p> <p>Parameters:</p> Name Type Description Default <code>counts</code> <code>array or pd.Series or pd.DataFrame</code> <p>Array of ephithermal neutron counts.</p> required <code>theta_N</code> <code>float</code> <p>Volumetric water content of the soil estimated from the uncorrected neutron counts.</p> required <code>road_width</code> <code>float</code> <p>Width of the road in m.</p> required <code>road_distance</code> <code>float</code> <p>Distance of the road from the sensor in m. Default is 0.0.</p> <code>0.0</code> <code>theta_road</code> <code>float</code> <p>Volumetric water content of the road. Default is 0.12.</p> <code>0.12</code> <code>p0-p9</code> <code>float</code> <p>Parameters of the correction function. Default values are from Schr\u00f6n et al., 2018.</p> required <p>Returns:</p> Type Description <code>array or pd.Series or pd.DataFrame</code> <p>Array of corrected neutron counts for road effects.</p> References <p>Schr\u00f6n,M.,Rosolem,R.,K\u00f6hli,M., Piussi,L.,Schr\u00f6ter,I.,Iwema,J.,etal. (2018).Cosmic-ray neutron rover surveys of field soil moisture and the influence of roads.WaterResources Research,54,6441\u20136459. https://doi. org/10.1029/2017WR021719</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def road_correction(counts, theta_N, road_width, road_distance=0.0, theta_road=0.12, p0=0.42, p1=0.5, p2=1.06, p3=4, p4=0.16, p6=0.94, p7=1.10, p8=2.70, p9=0.01):\n\"\"\"Function to correct for road effects in neutron counts.\n    following the approach described in Schr\u00f6n et al., 2018.\n\n    Args:\n        counts (array or pd.Series or pd.DataFrame): Array of ephithermal neutron counts.\n        theta_N (float): Volumetric water content of the soil estimated from the uncorrected neutron counts.\n        road_width (float): Width of the road in m.\n        road_distance (float): Distance of the road from the sensor in m. Default is 0.0.\n        theta_road (float): Volumetric water content of the road. Default is 0.12.\n        p0-p9 (float): Parameters of the correction function. Default values are from Schr\u00f6n et al., 2018.\n\n    Returns:\n        (array or pd.Series or pd.DataFrame): Array of corrected neutron counts for road effects.\n\n    References:\n        Schr\u00f6n,M.,Rosolem,R.,K\u00f6hli,M., Piussi,L.,Schr\u00f6ter,I.,Iwema,J.,etal. (2018).Cosmic-ray neutron rover surveys\n        of field soil moisture and the influence of roads.WaterResources Research,54,6441\u20136459.\n        https://doi. org/10.1029/2017WR021719\n    \"\"\"\n    F1 = p0 * (1-np.exp(-p1*road_width))\n    F2 = -p2 - p3 * theta_road - ((p4 + theta_road) / (theta_N))\n    F3 = p6 * np.exp(-p7 * (road_width ** -p8) * road_distance ** 4) + (1 - p6) * np.exp(-p9 * road_distance)\n\n    C_roads = 1 + F1 * F2 * F3\n\n    corrected_counts = counts / C_roads\n\n    return corrected_counts\n</code></pre>"},{"location":"reference/#crnpy.crnpy.sensing_depth","title":"<code>sensing_depth(vwc, pressure, p_ref, bulk_density, Wlat, method='Schron_2017', dist=[0.5])</code>","text":"<p>Function that computes the estimated sensing depth of the cosmic-ray neutron probe. The function offers several methods to compute the depth at which 86 % of the neutrons probes the soil profile.</p> <p>Parameters:</p> Name Type Description Default <code>vwc</code> <code>array or pd.Series or pd.DataFrame</code> <p>Estimated volumetric water content for each timestamp.</p> required <code>pressure</code> <code>array or pd.Series or pd.DataFrame</code> <p>Atmospheric pressure in hPa for each timestamp.</p> required <code>p_ref</code> <code>float</code> <p>Reference pressure in hPa.</p> required <code>bulk_density</code> <code>float</code> <p>Soil bulk density.</p> required <code>Wlat</code> <code>float</code> <p>Lattice water content.</p> required <code>method</code> <code>str</code> <p>Method to compute the sensing depth. Options are 'Schron_2017' or 'Franz_2012'.</p> <code>'Schron_2017'</code> <code>dist</code> <code>list or array</code> <p>List of radial distances at which to estimate the sensing depth. Only used for the 'Schron_2017' method.</p> <code>[0.5]</code> <p>Returns:</p> Type Description <code>array or pd.Series or pd.DataFrame</code> <p>Estimated sensing depth in m.</p> References <p>Franz, T.E., Zreda, M., Ferre, T.P.A., Rosolem, R., Zweck, C., Stillman, S., Zeng, X. and Shuttleworth, W.J., 2012. Measurement depth of the cosmic ray soil moisture probe affected by hydrogen from various sources. Water Resources Research, 48(8). doi.org/10.1029/2012WR011871</p> <p>Schr\u00f6n, M., K\u00f6hli, M., Scheiffele, L., Iwema, J., Bogena, H. R., Lv, L., et al. (2017). Improving calibration and validation of cosmic-ray neutron sensors in the light of spatial sensitivity. Hydrol. Earth Syst. Sci. 21, 5009\u20135030. doi.org/10.5194/hess-21-5009-2017</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def sensing_depth(vwc, pressure, p_ref, bulk_density, Wlat, method='Schron_2017',dist=[0.5]):\n    # Convert docstring to google format\n\"\"\"Function that computes the estimated sensing depth of the cosmic-ray neutron probe.\n    The function offers several methods to compute the depth at which 86 % of the neutrons\n    probes the soil profile.\n\n    Args:\n        vwc (array or pd.Series or pd.DataFrame): Estimated volumetric water content for each timestamp.\n        pressure (array or pd.Series or pd.DataFrame): Atmospheric pressure in hPa for each timestamp.\n        p_ref (float): Reference pressure in hPa.\n        bulk_density (float): Soil bulk density.\n        Wlat (float): Lattice water content.\n        method (str): Method to compute the sensing depth. Options are 'Schron_2017' or 'Franz_2012'.\n        dist (list or array): List of radial distances at which to estimate the sensing depth. Only used for the 'Schron_2017' method.\n\n    Returns:\n        (array or pd.Series or pd.DataFrame): Estimated sensing depth in m.\n\n    References:\n        Franz, T.E., Zreda, M., Ferre, T.P.A., Rosolem, R., Zweck, C., Stillman, S., Zeng, X. and Shuttleworth, W.J., 2012.\n        Measurement depth of the cosmic ray soil moisture probe affected by hydrogen from various sources.\n        Water Resources Research, 48(8). doi.org/10.1029/2012WR011871\n\n        Schr\u00f6n, M., K\u00f6hli, M., Scheiffele, L., Iwema, J., Bogena, H. R., Lv, L., et al. (2017).\n        Improving calibration and validation of cosmic-ray neutron sensors in the light of spatial sensitivity.\n        Hydrol. Earth Syst. Sci. 21, 5009\u20135030. doi.org/10.5194/hess-21-5009-2017\n    \"\"\"\n\n    # Determine sensing depth (D86)\n    if method == 'Schron_2017':\n\n        # See Appendix A of Schr\u00f6n et al. (2017)\n        Fp = 0.4922 / (0.86 - np.exp(-1 * pressure / p_ref));\n        Fveg = 0\n        results = []\n        for d in dist:\n            # Compute r_star\n            r_start = d/Fp\n\n            # Compute soil depth that accounts for 86% of the neutron flux\n            D86 = 1/ bulk_density * (8.321+0.14249*(0.96655 + np.exp(-0.01*r_start))*(20+(Wlat+vwc)) / (0.0429+(Wlat+vwc)))\n            results.append(D86)\n\n    elif method == 'Franz_2012':\n        results = [5.8/(bulk_density*Wlat+vwc+0.0829)]\n\n    return results\n</code></pre>"},{"location":"reference/#crnpy.crnpy.smooth_counts","title":"<code>smooth_counts(corrected_counts, window=5, order=3, method='moving_median')</code>","text":"<p>Use a Savitzky-Golay filter to smooth the signal of corrected neutron counts.</p> <p>Parameters:</p> Name Type Description Default <code>corrected_counts</code> <code>pd.DataFrame</code> <p>Dataframe containing the corrected neutron counts.</p> required <code>window</code> <code>int</code> <p>Window size for the Savitzky-Golay filter. Default is 5.</p> <code>5</code> <code>method</code> <code>str</code> <p>Method to use for smoothing the data. Default is 'moving_median'. Options are 'moving_average', 'moving_median' and 'savitzky_golay'.</p> <code>'moving_median'</code> <code>order</code> <code>int</code> <p>Order of the Savitzky-Golay filter. Default is 3.</p> <code>3</code> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>DataFrame with smoothed neutron counts.</p> References <p>Franz, T.E., Wahbi, A., Zhang, J., Vreugdenhil, M., Heng, L., Dercon, G., Strauss, P., Brocca, L. and Wagner, W., 2020. Practical data products from cosmic-ray neutron sensing for hydrological applications. Frontiers in Water, 2, p.9. doi.org/10.3389/frwa.2020.00009</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def smooth_counts(corrected_counts,window=5,order=3, method='moving_median'):\n\"\"\"Use a Savitzky-Golay filter to smooth the signal of corrected neutron counts.\n\n    Args:\n        corrected_counts (pd.DataFrame): Dataframe containing the corrected neutron counts.\n        window (int): Window size for the Savitzky-Golay filter. Default is 5.\n        method (str): Method to use for smoothing the data. Default is 'moving_median'.\n            Options are 'moving_average', 'moving_median' and 'savitzky_golay'.\n        order (int): Order of the Savitzky-Golay filter. Default is 3.\n\n    Returns:\n        (pd.DataFrame): DataFrame with smoothed neutron counts.\n\n    References:\n        Franz, T.E., Wahbi, A., Zhang, J., Vreugdenhil, M., Heng, L., Dercon, G., Strauss, P., Brocca, L. and Wagner, W., 2020.\n        Practical data products from cosmic-ray neutron sensing for hydrological applications. Frontiers in Water, 2, p.9.\n        doi.org/10.3389/frwa.2020.00009\n    \"\"\"\n\n    if method == 'moving_average':\n        corrected_counts = corrected_counts.rolling(window=window, center=True, min_periods=1).mean()\n    elif method == 'moving_median':\n        corrected_counts = corrected_counts.rolling(window=window, center=True, min_periods=1).median()\n\n    elif method == 'savitzky_golay':\n        if corrected_counts.isna().any():\n            print('Dataframe contains NaN values. Please remove NaN values before smoothing the data.')\n\n        if type(corrected_counts) == pd.core.series.Series:\n            filtered = np.round(savgol_filter(corrected_counts,window,order))\n            corrected_counts = pd.DataFrame(filtered,columns=['counts'], index=corrected_counts.index)\n        elif type(corrected_counts) == pd.core.frame.DataFrame:\n            for col in corrected_counts.columns:\n                corrected_counts[col] = np.round(savgol_filter(corrected_counts[col],window,order))\n    else:\n        raise ValueError('Invalid method. Please select a valid filtering method., options are: moving_average, moving_median, savitzky_golay')\n    corrected_counts = corrected_counts.ffill(limit=window).bfill(limit=window).copy()\n    return corrected_counts\n</code></pre>"},{"location":"reference/#crnpy.crnpy.spatial_smooth","title":"<code>spatial_smooth(sm, lat, lng, max_dist=500, min_neighbours=3)</code>","text":"<p>Spatial smoothing of soil moisture data using inverse distance weighting.</p> <p>Parameters:</p> Name Type Description Default <code>sm</code> <code>list or array</code> <p>Soil moisture in mm of water.</p> required <code>lat</code> <code>list or array</code> <p>Latitude of the measurement points.</p> required <code>lng</code> <code>list or array</code> <p>Longitude of the measurement points.</p> required <code>max_dist</code> <code>float</code> <p>Maximum distance to consider for the spatial smoothing in meters.</p> <code>500</code> <code>min_neighbours</code> <code>int</code> <p>Minimum number of neighbours to consider for the spatial smoothing.</p> <code>3</code> <code>intensity</code> <code>int</code> <p>Intensity of the inverse distance weighting.</p> required <p>Returns:</p> Type Description <code>array</code> <p>Spatially smoothed soil moisture in mm of water.</p> References <p>Andres Patrignani. (2020). PyNotes for Environmental Scientists (v1.0). Zenodo. https://doi.org/10.5281/zenodo.3731390</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def spatial_smooth(sm, lat, lng, max_dist=500, min_neighbours=3):\n    # Convert the docstring to google-style\n\"\"\"Spatial smoothing of soil moisture data using inverse distance weighting.\n\n    Args:\n        sm (list or array): Soil moisture in mm of water.\n        lat (list or array): Latitude of the measurement points.\n        lng (list or array): Longitude of the measurement points.\n        max_dist (float): Maximum distance to consider for the spatial smoothing in meters.\n        min_neighbours (int): Minimum number of neighbours to consider for the spatial smoothing.\n        intensity (int): Intensity of the inverse distance weighting.\n\n    Returns:\n        (array): Spatially smoothed soil moisture in mm of water.\n\n    References:\n        Andres Patrignani. (2020). PyNotes for Environmental Scientists (v1.0). Zenodo. https://doi.org/10.5281/zenodo.3731390\n    \"\"\"\n\n    sm_ini = np.array(sm)\n    sm_result = np.array(sm)\n\n    for i in range(len(lat)):\n        sm_i = np.array([])\n        for j in range(len(lat)):\n            dist = haversine(lat[i], lng[i], lat[j], lng[j])\n            if dist &lt;= max_dist and sm_ini[j] &gt; 0:\n                sm_i = np.append(sm_i, sm_ini[j])\n        if len(sm_i) &gt;= min_neighbours:\n            sm_result[i] = np.average(sm_i)\n        else:\n            sm_result[i] = sm_ini[i]\n    return sm_result\n</code></pre>"},{"location":"reference/#crnpy.crnpy.storage","title":"<code>storage(sm, T=1, Z_surface=150, Z_subsurface=1000)</code>","text":"<p>Exponential filter to estimate soil moisture in the rootzone from surface observtions.</p> <p>Parameters:</p> Name Type Description Default <code>sm</code> <code>list or array</code> <p>Soil moisture in mm of water.</p> required <code>T</code> <code>float</code> <p>Characteristic time length in the same units as the measurement interval.</p> <code>1</code> <code>Z_surface</code> <code>float</code> <p>Depth of surface layer in mm. This should be an intermediate value according to the sensing depth computed using the D86 method.</p> <code>150</code> <code>Z_subsurface</code> <code>float</code> <p>Depth of subsurface layer in mm.</p> <code>1000</code> <p>Returns:</p> Type Description <code>tuple</code> <p>tuple containing: - Surface soil water storage (array): Surface soil water storage in mm of water. - Subsurface soil water storage (array): Subsurface soil water storage in mm of water.</p> References <p>Albergel, C., R\u00fcdiger, C., Pellarin, T., Calvet, J.C., Fritz, N., Froissard, F., Suquia, D., Petitpa, A., Piguet, B. and Martin, E., 2008. From near-surface to root-zone soil moisture using an exponential filter: an assessment of the method based on in-situ observations and model simulations. Hydrology and Earth System Sciences, 12(6), pp.1323-1337.</p> <p>Franz, T.E., Wahbi, A., Zhang, J., Vreugdenhil, M., Heng, L., Dercon, G., Strauss, P., Brocca, L. and Wagner, W., 2020. Practical data products from cosmic-ray neutron sensing for hydrological applications. Frontiers in Water, 2, p.9.</p> <p>Rossini, P. and Patrignani, A., 2021. Predicting rootzone soil moisture from surface observations in cropland using an exponential filter. Soil Science Society of America Journal.</p> Source code in <code>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py</code> <pre><code>def storage(sm,T=1,Z_surface=150,Z_subsurface=1000):\n\"\"\"Exponential filter to estimate soil moisture in the rootzone from surface observtions.\n\n    Args:\n        sm (list or array): Soil moisture in mm of water.\n        T (float): Characteristic time length in the same units as the measurement interval.\n        Z_surface (float): Depth of surface layer in mm. This should be an intermediate value according to the\n            sensing depth computed using the D86 method.\n        Z_subsurface (float): Depth of subsurface layer in mm.\n\n    Returns:\n        (tuple): tuple containing:\n            - **Surface soil water storage** (*array*): Surface soil water storage in mm of water.\n            - **Subsurface soil water storage** (*array*): Subsurface soil water storage in mm of water.\n\n    References:\n        Albergel, C., R\u00fcdiger, C., Pellarin, T., Calvet, J.C., Fritz, N., Froissard, F., Suquia, D., Petitpa, A., Piguet, B. and Martin, E., 2008.\n        From near-surface to root-zone soil moisture using an exponential filter: an assessment of the method based on in-situ observations and model\n        simulations. Hydrology and Earth System Sciences, 12(6), pp.1323-1337.\n\n        Franz, T.E., Wahbi, A., Zhang, J., Vreugdenhil, M., Heng, L., Dercon, G., Strauss, P., Brocca, L. and Wagner, W., 2020.\n        Practical data products from cosmic-ray neutron sensing for hydrological applications. Frontiers in Water, 2, p.9.\n\n        Rossini, P. and Patrignani, A., 2021. Predicting rootzone soil moisture from surface observations in cropland using an exponential filter.\n        Soil Science Society of America Journal.\n    \"\"\"\n\n    # Parameters\n    t_delta = 1\n    sm_min = np.min(sm)\n    sm_max = np.max(sm)\n    ms = (sm-sm_min)/(sm_max-sm_min)\n\n    # Pre-allocate soil water index array\n    SWI = np.ones_like(ms)*np.nan\n    K = np.ones_like(ms)*np.nan\n\n    # Initial conditions\n    SWI[0] = ms[0]\n    K[0] = 1\n\n    # Values from 2 to N\n    for n in range(1,len(SWI)):\n        if ~np.isnan(ms[n]) &amp; ~np.isnan(ms[n-1]):\n            K[n] = K[n-1] / (K[n-1] + np.exp(-t_delta/T))\n            SWI[n] = SWI[n-1] + K[n]*(ms[n] - SWI[n-1])\n        else:\n            continue\n\n    # Surface storage\n    storage_surface = sm*Z_surface\n\n    # Rootzone storage\n    storage_subsurface = (SWI*(sm_max-sm_min) + sm_min)*Z_subsurface\n\n    return storage_surface, storage_subsurface\n</code></pre>"},{"location":"reference/#crnpy.data--crnpydata","title":"crnpy.data","text":"<p>Data module for crnpy.</p> <p>This module contains data for the crnpy package.</p> <p>Attributes:</p> Name Type Description <code>cutoff_rigidity</code> <code>list</code> <p>Cutoff rigidity values for the whole world. See crnpy.crnpy.cutoff_rigidity</p> <code>neutron_detectors</code> <code>list</code> <p>Neutron detector locations. See crnpy.crnpy.find_neutron_detectors</p>"},{"location":"examples/example_Hydroinnova_rover/","title":"Example 1","text":"In\u00a0[2]: Copied! <pre>import pandas as pd\nimport numpy as np\nfrom crnpy import crnpy\n</pre> import pandas as pd import numpy as np from crnpy import crnpy In\u00a0[3]: Copied! <pre># Read the dataset\ndf = pd.read_csv(\"example_readings/Konza_KS_2108181329.KSU\", skiprows=20, names=[\"RecordNum\", \"Date_Time(UTC)\", \"PTB110_mb\", \"P4_mb\", \"P1_mb\", \"T1_C\", \"RH1\", \"T_CS215\", \"RH_CS215\", \"Vbat\", \"N1Cts\", \"N2Cts\", \"N3Cts\", \"N4Cts\", \"N5Cts\", \"N6Cts\", \"N7Cts\", \"N8Cts\", \"N1ETsec\", \"N3ETsec\", \"N5ETsec\", \"N7ETsec\", \"N1T(C)\", \"N1RH\", \"N5T(C)\", \"N5RH\", \"GpsUTC\", \"LatDec\", \"LongDec\", \"Alt\", \"Qual\", \"NumSats\", \"HDOP\", \"Speed_kmh\", \"COG\", \"SpeedQuality\", \"strDate\"])\n\n# Define columns names\ncounts_colums = ['N1Cts', 'N2Cts', 'N3Cts','N4Cts', 'N5Cts', 'N6Cts', 'N7Cts', 'N8Cts']\ncont_times_col = ['N1ETsec', 'N1ETsec', 'N3ETsec','N3ETsec', 'N5ETsec', 'N5ETsec', 'N7ETsec', 'N7ETsec']\n\n# Parse timestamps and set as index\ndf['timestamp'] = pd.to_datetime(df['Date_Time(UTC)'])\ndf.set_index(df['timestamp'], inplace=True)\n\n# Normalize counts to counts/h\ndf[counts_colums] = \\\n    crnpy.normalize_counts(df[counts_colums], \\\n                           count_time=60, count_times=df[cont_times_col])\n\ndf['total_counts'] = crnpy.compute_total_raw_counts(df[counts_colums])\n</pre> # Read the dataset df = pd.read_csv(\"example_readings/Konza_KS_2108181329.KSU\", skiprows=20, names=[\"RecordNum\", \"Date_Time(UTC)\", \"PTB110_mb\", \"P4_mb\", \"P1_mb\", \"T1_C\", \"RH1\", \"T_CS215\", \"RH_CS215\", \"Vbat\", \"N1Cts\", \"N2Cts\", \"N3Cts\", \"N4Cts\", \"N5Cts\", \"N6Cts\", \"N7Cts\", \"N8Cts\", \"N1ETsec\", \"N3ETsec\", \"N5ETsec\", \"N7ETsec\", \"N1T(C)\", \"N1RH\", \"N5T(C)\", \"N5RH\", \"GpsUTC\", \"LatDec\", \"LongDec\", \"Alt\", \"Qual\", \"NumSats\", \"HDOP\", \"Speed_kmh\", \"COG\", \"SpeedQuality\", \"strDate\"])  # Define columns names counts_colums = ['N1Cts', 'N2Cts', 'N3Cts','N4Cts', 'N5Cts', 'N6Cts', 'N7Cts', 'N8Cts'] cont_times_col = ['N1ETsec', 'N1ETsec', 'N3ETsec','N3ETsec', 'N5ETsec', 'N5ETsec', 'N7ETsec', 'N7ETsec']  # Parse timestamps and set as index df['timestamp'] = pd.to_datetime(df['Date_Time(UTC)']) df.set_index(df['timestamp'], inplace=True)  # Normalize counts to counts/h df[counts_colums] = \\     crnpy.normalize_counts(df[counts_colums], \\                            count_time=60, count_times=df[cont_times_col])  df['total_counts'] = crnpy.compute_total_raw_counts(df[counts_colums])  In\u00a0[4]: Copied! <pre>df['total_counts'].plot()\n</pre> df['total_counts'].plot() Out[4]: <pre>&lt;AxesSubplot: xlabel='timestamp'&gt;</pre> In\u00a0[5]: Copied! <pre>df['total_counts']=crnpy.drop_outlier(df['total_counts'], min_counts=240, max_counts=380)\n\n#Find stations with cutoff rigidity similar to estimated by lat,lon\ncrnpy.find_neutron_detectors(crnpy.cutoff_rigidity(39.1, -96.6), timestamps=df['timestamp'])\n\n#Download data for one of the similar stations and add to df\nincoming_neutrons = crnpy.get_incoming_neutron_flux(df['timestamp'], station=\"NEWK\")\n</pre> df['total_counts']=crnpy.drop_outlier(df['total_counts'], min_counts=240, max_counts=380)  #Find stations with cutoff rigidity similar to estimated by lat,lon crnpy.find_neutron_detectors(crnpy.cutoff_rigidity(39.1, -96.6), timestamps=df['timestamp'])  #Download data for one of the similar stations and add to df incoming_neutrons = crnpy.get_incoming_neutron_flux(df['timestamp'], station=\"NEWK\") <pre>Discarded counts below 240: 0\nDiscarded counts above 380: 2\nDiscarded 5 outliers using modified Z-score.\n\nSelect a station with an altitude similar to that of your location. For more information go to: 'https://www.nmdb.eu/nest/help.php#helpstations\n\nYour cutoff rigidity is 2.87 GV\n     STID     NAME     R  Altitude_m  Period available\n13   DRBS  Dourbes  3.18         225              True\n40   NEWK   Newark  2.40          50              True\n28  KIEL2   KielRT  2.36          54              True\nWarning: The number of timestamps does not match the number of neutron flux values.\nCheck time resolution, or try the interpolate_incoming_neutron_flux() method.\n</pre> In\u00a0[6]: Copied! <pre># Interpolate incomming flux hourly to measured timestamps.\ndf['incoming_flux']=crnpy.interpolate_incoming_flux(incoming_neutrons, timestamps=df['timestamp'])\n</pre> # Interpolate incomming flux hourly to measured timestamps. df['incoming_flux']=crnpy.interpolate_incoming_flux(incoming_neutrons, timestamps=df['timestamp']) In\u00a0[7]: Copied! <pre># Fill NaN values in atmospheric data\ndf[['PTB110_mb', 'RH_CS215', 'T_CS215']] = crnpy.fill_missing_atm(df[['PTB110_mb', 'RH_CS215', 'T_CS215']])\n\n# Correct count by atmospheric variables and incoming flux\ndf['corrected']=crnpy.atm_correction(counts=df['total_counts'], pressure=df['PTB110_mb'], humidity=df['RH_CS215'], temp=df['T_CS215'],\n                                     Pref=df['PTB110_mb'].mean(), Aref=0, L=130, incoming_neutrons=df['incoming_flux']).dropna() \n\ndf['counts']=crnpy.fill_counts(df['corrected'])\ndf['counts'] = crnpy.smooth_counts(df['counts'].dropna(), window=17, order=3)\n</pre> # Fill NaN values in atmospheric data df[['PTB110_mb', 'RH_CS215', 'T_CS215']] = crnpy.fill_missing_atm(df[['PTB110_mb', 'RH_CS215', 'T_CS215']])  # Correct count by atmospheric variables and incoming flux df['corrected']=crnpy.atm_correction(counts=df['total_counts'], pressure=df['PTB110_mb'], humidity=df['RH_CS215'], temp=df['T_CS215'],                                      Pref=df['PTB110_mb'].mean(), Aref=0, L=130, incoming_neutrons=df['incoming_flux']).dropna()   df['counts']=crnpy.fill_counts(df['corrected']) df['counts'] = crnpy.smooth_counts(df['counts'].dropna(), window=17, order=3)  <pre>Using median count time as expected count time: 60.0\n</pre> <pre>C:\\Users\\jperaza\\Anaconda3\\envs\\GIS\\lib\\site-packages\\crnpy\\crnpy.py:358: UserWarning: Reference incoming neutron flux not provided. Using first value of incoming neutron flux.\n  warnings.warn('Reference incoming neutron flux not provided. Using first value of incoming neutron flux.')\nC:\\Users\\jperaza\\Anaconda3\\envs\\GIS\\lib\\site-packages\\crnpy\\crnpy.py:107: UserWarning: No count time columns provided. Using timestamp index to compute count time.\n  warnings.warn(\"No count time columns provided. Using timestamp index to compute count time.\")\n</pre> In\u00a0[8]: Copied! <pre>df['VWC']=crnpy.counts_to_vwc(df['counts'], N0=550, bulk_density=1.3, Wlat=0.03, Wsoc=0.01)\ndf['VWC']=crnpy.fill_missing_vwc(df['VWC'])\n</pre> df['VWC']=crnpy.counts_to_vwc(df['counts'], N0=550, bulk_density=1.3, Wlat=0.03, Wsoc=0.01) df['VWC']=crnpy.fill_missing_vwc(df['VWC']) In\u00a0[10]: Copied! <pre>import matplotlib.pyplot as plt\n\n#Plot the observation on space\nplt.scatter(-df['LongDec'], df['LatDec'], c=df['VWC'])\nplt.colorbar()\n</pre> import matplotlib.pyplot as plt  #Plot the observation on space plt.scatter(-df['LongDec'], df['LatDec'], c=df['VWC']) plt.colorbar() Out[10]: <pre>&lt;matplotlib.colorbar.Colorbar at 0x1fe95ac20b0&gt;</pre> In\u00a0[1]: Copied! <pre>\n</pre> <pre>GIS_env\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/example_Hydroinnova_rover/#crnpy-example-using-hydroinnova-inc-neutron-detector-rover-readings","title":"CRNPy example using Hydroinnova, Inc neutron detector rover readings\u00b6","text":""},{"location":"examples/stationary/example_RDT_station/","title":"example RDT station","text":"In\u00a0[27]: Copied! <pre>import pandas as pd\nimport numpy as np\nfrom crnpy import crnpy\n</pre> import pandas as pd import numpy as np from crnpy import crnpy In\u00a0[28]: Copied! <pre># Read the DataFrame\ndf = pd.read_csv(\"rdt.csv\", names=['timestamp','pressure','RH', 'T','DP','BattVolt','counts_1','counts_2','counts_3'])\n\n# Parse timestamps and set as index\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\ndf.set_index(df['timestamp'], inplace=True)\n\n# Get counting times\ndf['count_time']=crnpy.count_time(df[['counts_1','counts_2','counts_3']])\n\n# Check counts for nan values in the counts\nprint(\"dectors with nan:\", [df['counts_1'].isna().any(),df['counts_2'].isna().any(),df['counts_3'].isna().any()])\n\n# Fill nan values in detector 2\ndf[['counts_1','counts_2','counts_3']] = crnpy.fill_counts(df[['counts_1','counts_2','counts_3']], count_times=df['count_time'])\n\n# Check counts for nan values in the counts\nprint(\"dectors with nan:\", [df['counts_1'].isna().any(),df['counts_2'].isna().any(),df['counts_3'].isna().any()])\n\ndf[['counts_1','counts_2','counts_3']].head()\n</pre> # Read the DataFrame df = pd.read_csv(\"rdt.csv\", names=['timestamp','pressure','RH', 'T','DP','BattVolt','counts_1','counts_2','counts_3'])  # Parse timestamps and set as index df['timestamp'] = pd.to_datetime(df['timestamp']) df.set_index(df['timestamp'], inplace=True)  # Get counting times df['count_time']=crnpy.count_time(df[['counts_1','counts_2','counts_3']])  # Check counts for nan values in the counts print(\"dectors with nan:\", [df['counts_1'].isna().any(),df['counts_2'].isna().any(),df['counts_3'].isna().any()])  # Fill nan values in detector 2 df[['counts_1','counts_2','counts_3']] = crnpy.fill_counts(df[['counts_1','counts_2','counts_3']], count_times=df['count_time'])  # Check counts for nan values in the counts print(\"dectors with nan:\", [df['counts_1'].isna().any(),df['counts_2'].isna().any(),df['counts_3'].isna().any()])  df[['counts_1','counts_2','counts_3']].head()  <pre>dectors with nan: [False, True, False]\nUsing median count time as expected count time: 3600.0\ndectors with nan: [False, False, False]\n</pre> Out[28]: counts_1 counts_2 counts_3 timestamp 2020-04-10 09:47:00 848 716.0 742 2020-04-10 10:47:00 436 7200.0 796 2020-04-10 11:17:00 389 396.0 354 2020-04-10 12:17:00 820 786.0 714 2020-04-10 13:17:00 844 707.0 734 In\u00a0[29]: Copied! <pre># Normalize counts to counts/h\ndf[['counts_1','counts_2','counts_3']] = crnpy.normalize_counts(df[['counts_1','counts_2','counts_3']], count_time=3600, count_times=df['count_time'])\n\ndf[['counts_1','counts_2','counts_3']].head()\n</pre> # Normalize counts to counts/h df[['counts_1','counts_2','counts_3']] = crnpy.normalize_counts(df[['counts_1','counts_2','counts_3']], count_time=3600, count_times=df['count_time'])  df[['counts_1','counts_2','counts_3']].head() Out[29]: counts_1 counts_2 counts_3 timestamp 2020-04-10 09:47:00 NaN NaN NaN 2020-04-10 10:47:00 436.0 7200.0 796.0 2020-04-10 11:17:00 778.0 792.0 708.0 2020-04-10 12:17:00 820.0 786.0 714.0 2020-04-10 13:17:00 844.0 707.0 734.0 In\u00a0[30]: Copied! <pre>df['total_counts'] = crnpy.compute_total_raw_counts(df[['counts_1','counts_2','counts_3']], nan_strategy='average')\n\ndf['total_counts']=crnpy.drop_outlier(df['total_counts'], min_counts=2000, max_counts=3000)\n\ndf.plot('timestamp', 'total_counts')\n</pre> df['total_counts'] = crnpy.compute_total_raw_counts(df[['counts_1','counts_2','counts_3']], nan_strategy='average')  df['total_counts']=crnpy.drop_outlier(df['total_counts'], min_counts=2000, max_counts=3000)  df.plot('timestamp', 'total_counts') <pre>NaN values found. Replacing missing values with average of other detectors before summing.\nDiscarded counts below 2000: 128\nDiscarded counts above 3000: 132\nDiscarded 123 outliers using modified Z-score.\n</pre> Out[30]: <pre>&lt;Axes: xlabel='timestamp'&gt;</pre> In\u00a0[31]: Copied! <pre>#Find stations with cutoff rigidity similar to estimated by lat,lon\ncrnpy.find_neutron_detectors(crnpy.cutoff_rigidity(39.1, -96.6))\n\n#Download data for one of the similar stations and add to df\nincoming_neutrons = crnpy.get_incoming_neutron_flux(df['timestamp'][0], df['timestamp'][-1], station=\"IRKT\", utc_offset=-5)\ndf['incoming_flux'] = incoming_neutrons['counts']\n</pre> #Find stations with cutoff rigidity similar to estimated by lat,lon crnpy.find_neutron_detectors(crnpy.cutoff_rigidity(39.1, -96.6))  #Download data for one of the similar stations and add to df incoming_neutrons = crnpy.get_incoming_neutron_flux(df['timestamp'][0], df['timestamp'][-1], station=\"IRKT\", utc_offset=-5) df['incoming_flux'] = incoming_neutrons['counts'] <pre>\nSelect a station with an altitude similar to that of your location. For more information go to: 'https://www.nmdb.eu/nest/help.php#helpstations\n\nYour cutoff rigidity is 2.87 GV\n     STID                          NAME     R  Altitude_m\n42   NVBK                   Novosibirsk  2.91         163\n9    CLMX                        Climax  3.00        3400\n13   DRBS                       Dourbes  3.18         225\n31   MCRL  Mobile Cosmic Ray Laboratory  2.46         200\n33   MOSC                        Moscow  2.43         200\n40   NEWK                        Newark  2.40          50\n28  KIEL2                        KielRT  2.36          54\n27   KIEL                          Kiel  2.36          54\n32   MGDN                       Magadan  2.10         220\n21   IRKT                       Irkustk  3.64         435\n</pre> In\u00a0[32]: Copied! <pre># Fill NaN values in atmospheric data\ndf[['pressure', 'RH', 'T']] = crnpy.fill_missing_atm(df[['pressure', 'RH', 'T']])\n# Correct count by atmospheric variables and incoming flux\ndf['total_counts']=crnpy.drop_outlier(df['total_counts'], min_counts=2000, max_counts=3000)\ndf['total_counts']=crnpy.fill_counts(df['total_counts'])\ndf['corrected']=crnpy.atm_correction(df['total_counts'], pressure=df['pressure'], humidity=df['RH'], temp=df['T'], Pref=df['pressure'].mean(), Aref=0, L=130, incoming_neutrons=df['incoming_flux']).dropna()\n</pre> # Fill NaN values in atmospheric data df[['pressure', 'RH', 'T']] = crnpy.fill_missing_atm(df[['pressure', 'RH', 'T']]) # Correct count by atmospheric variables and incoming flux df['total_counts']=crnpy.drop_outlier(df['total_counts'], min_counts=2000, max_counts=3000) df['total_counts']=crnpy.fill_counts(df['total_counts']) df['corrected']=crnpy.atm_correction(df['total_counts'], pressure=df['pressure'], humidity=df['RH'], temp=df['T'], Pref=df['pressure'].mean(), Aref=0, L=130, incoming_neutrons=df['incoming_flux']).dropna()   <pre>Discarded counts below 2000: 0\nDiscarded counts above 3000: 0\nDiscarded 37 outliers using modified Z-score.\nUsing median count time as expected count time: 3600.0\n</pre> <pre>C:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py:131: UserWarning: No count time columns provided. Using timestamp index to compute count time.\n  warnings.warn(\"No count time columns provided. Using timestamp index to compute count time.\")\nC:\\Users\\jperaza\\AppData\\Local\\anaconda3\\envs\\crnpy\\lib\\site-packages\\crnpy\\crnpy.py:356: UserWarning: Reference incoming neutron flux not provided. Using first value of incoming neutron flux.\n  warnings.warn('Reference incoming neutron flux not provided. Using first value of incoming neutron flux.')\n</pre> In\u00a0[33]: Copied! <pre># Filter using the Savitzky-Golay filter\ndf_filtered = crnpy.smooth_counts(df['corrected'].dropna(), window=17, order=3)\n\ndf_filtered.plot()\n</pre> # Filter using the Savitzky-Golay filter df_filtered = crnpy.smooth_counts(df['corrected'].dropna(), window=17, order=3)  df_filtered.plot() Out[33]: <pre>&lt;Axes: xlabel='timestamp'&gt;</pre> In\u00a0[34]: Copied! <pre>df['VWC']=crnpy.counts_to_vwc(df_filtered, N0=1300*3, bulk_density=1.3, Wlat=0.03, Wsoc=0.01)\ndf['VWC'].plot()\n</pre> df['VWC']=crnpy.counts_to_vwc(df_filtered, N0=1300*3, bulk_density=1.3, Wlat=0.03, Wsoc=0.01) df['VWC'].plot() Out[34]: <pre>&lt;Axes: xlabel='timestamp'&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/stationary/example_RDT_station/#crnpy-example-using-radiation-detection-technologies-inc-neutron-detectors-readings","title":"CRNPy example using Radiation Detection Technologies, Inc neutron detectors readings\u00b6","text":""}]}